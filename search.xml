<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>书畅的博客</title>
      <link href="/9102/09/10/hello-world/"/>
      <url>/9102/09/10/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome ~"></a>Welcome ~</h3><h3 id="Nice-to-meet-you"><a href="#Nice-to-meet-you" class="headerlink" title="Nice to meet you"></a>Nice to meet you</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript BOM</title>
      <link href="/2019/09/09/JS%20BOM/"/>
      <url>/2019/09/09/JS%20BOM/</url>
      
        <content type="html"><![CDATA[<p> <strong>JS 学习笔记</strong></p><p>BOM是 window 的核心，是浏览器对象模型，利用BOM可以取得浏览器相关的信息。</p><hr><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>五大部分：</p><ol><li>Window： JavaScript 层级中顶层对象就是浏览器窗口</li><li>Navigator： 包含客户端浏览器的信息</li><li>History： 包含了浏览器窗口访问过的URL</li><li>Location： 包含当前URL的信息</li><li>Screen： 包含客户端显示屏信息</li></ol><hr><p>Demo：模拟懒加载图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    lazyLoad();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(elem.offsetTop &lt;= <span class="built_in">window</span>.innerHeight + <span class="built_in">window</span>.pageYOffset&#123;</span><br><span class="line">       elem.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(elem.style.opacity == <span class="number">1</span>)&#123;</span><br><span class="line">            clearInterval(elem.timer);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            elem.style.opacity = <span class="built_in">parseFloat</span>(elem.style.opacity) + <span class="number">0.01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">60</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 事件</title>
      <link href="/2019/09/07/JS%20DOM%20II/"/>
      <url>/2019/09/07/JS%20DOM%20II/</url>
      
        <content type="html"><![CDATA[<p> <strong>JS 学习笔记</strong></p><p>事件是交互体验的核心</p><hr><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ul><li>onxxx 绑定：兼容性好，等同于写在 HTML 标签内</li><li>div.addEventListener(事件类型, func, false)：可绑定多个处理函数，，第三个参数配置”是否捕获”。<strong>函数地址相同则只执行一次</strong></li><li>div.attachEvent(‘onclick’, function(){})：兼容IE，<strong>this 指向 window，函数地址相同则只执行一次</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个事件绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">elem, type, handle</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(elem.addEventListener)&#123;</span><br><span class="line">        elem.addEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(elem.attachEvent)&#123;</span><br><span class="line">        elem.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            handle.call(elem);<span class="comment">// 因为this指向window，需要通过call来改使this指向element</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        elem[<span class="string">'on'</span> + type] = handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除事件</span></span><br><span class="line">sth.onxxx = <span class="literal">false</span>;</span><br><span class="line">sth.removeEventListener(<span class="string">'xxx'</span>, func, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>事件冒泡：由子到父，自底而上，结构上嵌套</p><p>不冒泡的事件：focus / blur / change / submit / reset / select</p><p>取消冒泡：event.stopPropagation();【IE：event.cancelBubble = true】</p><p>事件捕获：由父到子，使用方法：sth.addEventListener(‘click’, func, true);</p><p>IE事件捕获：div.setCapture()；解除：div.releaseCapture()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装阻止冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event.stopPropagation) &#123;</span><br><span class="line">        event.stopPropagation();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认事件"><a href="#默认事件" class="headerlink" title="默认事件"></a>默认事件</h4><p>表单提交、a标签跳转，右键菜单<br>取消默认：return false;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表单提交、a标签跳转，右键菜单</span><br><span class="line">取消默认：<span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.pageXOffset + <span class="string">' '</span> + <span class="built_in">window</span>.pageYOffset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">事件源对象：</span><br><span class="line">event.target【火狐独有】</span><br><span class="line">event.srcElement【IE独有】</span><br><span class="line">chrome兼有</span><br><span class="line"><span class="comment">// 封装获取事件对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tar</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    elem.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">        <span class="built_in">console</span>.log(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>利用事件冒泡、事件源对象进行处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击li打印对应数字</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'u'</span>);</span><br><span class="line">ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="built_in">console</span>.log(target.innerText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><p>click = mousedown + mouseup</p><p>mouseover = mouseenter</p><p>mouseout = mouseleave</p><p>移动端：touchstart、touchmove、touchend</p><p>鼠标键：0左 1中 2右</p><p>DOM3规定 click 事件只能监听左键，通过 mousedown / mouseUp 来判断鼠标键</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标点击停留300毫秒，打开；大于300毫秒，拖拽</span></span><br><span class="line"><span class="keyword">var</span> fTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> lTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> key = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmouseUp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    lTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">if</span>(lTime - fTime &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        key = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">        key = <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        move();<span class="comment">// 拖拽函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><p>keydown、keypress、keyup</p><p>keydown 用于检测所有案件，包括操作类按键</p><p>keypress【ASCII码】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打啥输出啥【ASCII码和对应的字符】</span></span><br><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.charCode, <span class="built_in">String</span>.fromCharCode(e.charCode));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本类操作"><a href="#文本类操作" class="headerlink" title="文本类操作"></a>文本类操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementByTagName(<span class="string">'input'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 输入时触发</span></span><br><span class="line">input.oninput = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);<span class="comment">//实时更新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入完失焦触发</span></span><br><span class="line">input.change = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);<span class="comment">//失焦触发</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input type = <span class="string">"text"</span> value = <span class="string">"xxx"</span> </span><br><span class="line">onfocus = <span class="string">"if(this.value=='xxx')&#123;this.value='xxx'&#125;"</span> onblur=<span class="string">"if(this.value=='xxx')&#123;this.value='xxx'&#125;"</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM</title>
      <link href="/2019/09/07/JS%20DOM/"/>
      <url>/2019/09/07/JS%20DOM/</url>
      
        <content type="html"><![CDATA[<p> <strong>JS DOM学习笔记</strong></p><p>DOM 即 Document Object Model，文档对象模型，是 JS 操作 HTML 元素的标准编程入口。</p><hr><h3 id="DOM-节点类型"><a href="#DOM-节点类型" class="headerlink" title="DOM 节点类型"></a>DOM 节点类型</h3><ol><li>元素节点</li><li>属性节点</li><li>文本节点</li><li>注释节点</li><li>文档节点</li></ol><h3 id="获取-HTML-内容："><a href="#获取-HTML-内容：" class="headerlink" title="获取 HTML 内容："></a>获取 HTML 内容：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">''</span>)[ ];</span><br><span class="line"><span class="built_in">document</span>.getElementsByName()[ ];   <span class="comment">//常用于form\img\ifarame</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName()[ ];</span><br><span class="line"><span class="comment">//静态类，无实时性的副本</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'div &gt; span strong.dom'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><h3 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sth.parentNode;<span class="comment">//一个元素只有一个父节点【top为document】</span></span><br><span class="line">sth.childNodes;<span class="comment">//子节点</span></span><br><span class="line">sth.firstChild;<span class="comment">//第一个节点</span></span><br><span class="line">sth.lastChild;<span class="comment">//最后一个节点</span></span><br><span class="line">sth.nextSibling;<span class="comment">//下个兄弟节点</span></span><br><span class="line">sth.previousSibling;<span class="comment">//上个兄弟节点</span></span><br><span class="line"><span class="comment">//遍历元素节点【IE9.0以下仅支持children】</span></span><br><span class="line">sth.parentElement;<span class="comment">//父元素</span></span><br><span class="line">sth.children;</span><br><span class="line">sth.children.length;</span><br><span class="line">sth.firstElementChild/lastElementChild;<span class="comment">//元素仔</span></span><br><span class="line">sth.next/previous ElementSibling;</span><br></pre></td></tr></table></figure><p><em>节点的四个属性</em>和一个方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nodeName   div.firstChild.nodeName = <span class="string">"P"</span>;    <span class="comment">//元素标签名，大写只读</span></span><br><span class="line">nodeValue  div.childNodes[<span class="number">0</span>].nodeValue;<span class="comment">//文本注释内容，可读写</span></span><br><span class="line">nodeType   <span class="number">1.</span>元素<span class="number">2.</span>属性 <span class="number">3.</span>文本 <span class="number">8.</span>注释 <span class="number">9.</span>文档</span><br><span class="line">attributes 属性返回指定节点属性的集合。</span><br><span class="line">hasChildNodes();方法，判断有无子节点的方法<span class="comment">//不包括属性节点(写在节点里面)</span></span><br></pre></td></tr></table></figure><p>案例：选出元素节点，不使用children</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retEleChild</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = &#123;</span><br><span class="line">        length : <span class="number">0</span>,</span><br><span class="line">        push : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">        splice : <span class="built_in">Array</span>.prototype.splice<span class="comment">//类数组转换必备</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> child = node.childNodes,</span><br><span class="line">        len = child.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(child[i].nodeType === <span class="number">1</span>)&#123;</span><br><span class="line">            temp.push(child[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOM-继承树"><a href="#DOM-继承树" class="headerlink" title="DOM 继承树"></a>DOM 继承树</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__proto__ </span><br><span class="line">从源头到<span class="built_in">document</span>：</span><br><span class="line"><span class="built_in">Object</span></span><br><span class="line">EventTarget</span><br><span class="line">Node</span><br><span class="line">Document【原型定义了getElementByName】</span><br><span class="line">HTMLDocument【原型定义了getElementsByTagName】</span><br><span class="line"><span class="built_in">document</span>【通过 <span class="built_in">document</span>.documentElement 代表了 HTML文档】</span><br></pre></td></tr></table></figure><p>增删改查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">增：</span><br><span class="line"><span class="built_in">document</span>.createElement(<span class="string">''</span>); <span class="comment">// 常用</span></span><br><span class="line">docuemnt.createTextNode(<span class="string">'xxx'</span>);<span class="comment">// 文本节点</span></span><br><span class="line"><span class="built_in">document</span>.createComment(<span class="string">'xxx'</span>); <span class="comment">// 注释</span></span><br><span class="line">插：</span><br><span class="line">sth.appendChild(span);<span class="comment">//类等push()；是剪切</span></span><br><span class="line">ParentNode.insertBefore(a,b);<span class="comment">//父级调用，a插到b之前</span></span><br><span class="line"><span class="comment">// eg:</span></span><br><span class="line">div.insertBefore(strong, span);</span><br><span class="line">div.insertBefore(i,strong);</span><br><span class="line"><span class="comment">// insert strong before span, then insert i before string</span></span><br><span class="line">i strong span</span><br><span class="line">删：</span><br><span class="line">parent.removeChild();<span class="comment">//剪切出来</span></span><br><span class="line">parent.remove();<span class="comment">//真正的销毁，不存在了</span></span><br><span class="line">改：</span><br><span class="line">parentNode.replaceChild(newth, origin);</span><br><span class="line">div.replaceChild(p, strong);<span class="comment">//把strong剪切出来替换成p</span></span><br><span class="line"><span class="comment">// replaceChild strong with p.</span></span><br></pre></td></tr></table></figure><h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性：</span><br><span class="line">.innerHTML (获得文本内容)【常用】</span><br><span class="line">.innerText (老火狐没有)  .textContent  (老IE没有)</span><br><span class="line">方法：</span><br><span class="line">.setAttribute(<span class="string">'class'</span>, <span class="string">'demo'</span>);</span><br><span class="line">.getAttribute(<span class="string">'id'</span>);</span><br><span class="line">.className = <span class="string">"xxx"</span>;   更改属性名</span><br></pre></td></tr></table></figure><p>案例：给所有标签添加属性：this-name，赋值为该标签的节点名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> all = <span class="built_in">document</span>.getElementByTagName(<span class="string">'*'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; all.length; i ++)&#123;</span><br><span class="line">    all[i].setAttribute(<span class="string">'this-name'</span>, all[i].nodeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DATE"><a href="#DATE" class="headerlink" title="DATE"></a>DATE</h3><p>date 是系统提供的时间API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//记录了时刻，不实时变动</span></span><br><span class="line">date.getDate();<span class="comment">//1~31</span></span><br><span class="line">date.getDay();<span class="comment">//0~6</span></span><br><span class="line">date.getMonth();<span class="comment">//0~11</span></span><br><span class="line">date.getFullYear();<span class="comment">//2018</span></span><br><span class="line">date.getYear();<span class="comment">//118(since 1996)</span></span><br><span class="line"><span class="comment">// 注意："时分秒"用复数 s</span></span><br><span class="line">date.getHours();<span class="comment">//0~23</span></span><br><span class="line">date.getMinutes();<span class="comment">//0~59</span></span><br><span class="line">date.getSeconds();<span class="comment">//0~59</span></span><br><span class="line">date.getTime();<span class="comment">//时间戳 1970.1.1至今毫秒数</span></span><br><span class="line"></span><br><span class="line">设置时间</span><br><span class="line">date.setDate(<span class="number">15</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>setInterval 是 window 上的方法，每一次 setInterval 都新建一个定时器，起唯一标识，定时器很不准，内存状态会影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sI = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> sT = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</span><br><span class="line">clearInterval(sI);</span><br><span class="line">clearTimeout(sT);</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三分钟定时器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> sec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        sec ++;</span><br><span class="line">        <span class="keyword">if</span>(sec == <span class="number">60</span>)&#123;</span><br><span class="line">            sec = <span class="number">0</span>;</span><br><span class="line">            min ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span>(min == <span class="number">3</span>)&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="窗口属性"><a href="#窗口属性" class="headerlink" title="窗口属性"></a>窗口属性</h3><p>获取滚动条滚动距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.pageXOffset;</span><br><span class="line"><span class="comment">// IE 4.5.8:</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollLeft / Top;</span><br><span class="line"><span class="comment">// IE 6.7:</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollLeft/Top;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得滚动条位置方法：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollPos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageXOffset)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            y: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x: <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            y: <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动条滚动</span></span><br><span class="line"><span class="built_in">window</span>.scroll(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">window</span>.scrollTop();</span><br><span class="line"><span class="built_in">window</span>.scrollBy(<span class="number">0</span>, <span class="number">-10</span>);<span class="comment">// 累加滚动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动阅读</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line">sth.onclick = autoRead();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoRead</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key)&#123;</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.scrollBy(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">        key = <span class="literal">false</span>;<span class="comment">// 锁，防止重复触发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可视区窗口获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.innerWidth;</span><br><span class="line"><span class="built_in">window</span>.innerHeight;</span><br><span class="line"><span class="comment">// IE</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth / clientHeight; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取可视区窗口属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.innerWidth)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            w: <span class="built_in">window</span>.innerWidth,</span><br><span class="line">            h: <span class="built_in">window</span>.innerHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.documentElement.clientWidth)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                w: <span class="built_in">document</span>.documentELement.clientWidth,</span><br><span class="line">                h: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文档类型检测"><a href="#文档类型检测" class="headerlink" title="文档类型检测"></a>文档类型检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="comment">// 标准模式：直接渲染</span></span><br><span class="line"><span class="comment">// 怪异模式：兼容之前版本</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 检测兼容性：</span></span><br><span class="line"><span class="built_in">document</span>.compatMode</span><br><span class="line">标准：<span class="string">'CSS1'</span></span><br><span class="line">怪异：<span class="string">'BackCompat'</span></span><br></pre></td></tr></table></figure><h3 id="元素信息获取"><a href="#元素信息获取" class="headerlink" title="元素信息获取"></a>元素信息获取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化的值获取，非实时</span></span><br><span class="line">div.getBoundingClientRect();</span><br><span class="line"><span class="comment">// 元素视觉上尺寸</span></span><br><span class="line">div.offsetWidth;</span><br><span class="line">div.offsetHeight;</span><br><span class="line"><span class="comment">// 元素位置：无定位父级元素，返回相对文档坐标；父级有定位则返回相当于有定位的父级坐标</span></span><br><span class="line">div.offsetLeft;</span><br><span class="line">div.offsetTop;</span><br><span class="line"><span class="comment">// 返回有定位的父级</span></span><br><span class="line">sth.offsetParent;</span><br></pre></td></tr></table></figure><h3 id="脚本化CSS"><a href="#脚本化CSS" class="headerlink" title="脚本化CSS"></a>脚本化CSS</h3><p>作用于行间样式</p><p>驼峰命名</p><p>写入值为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取精准的属性值【含伪元素】</span></span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(div, <span class="string">"after"</span>).xxx</span><br><span class="line"><span class="comment">// IE:</span></span><br><span class="line">div.currentStyle.xxx</span><br><span class="line"><span class="comment">// 封装获得属性的方法：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>)[prop];</span><br><span class="line">        <span class="comment">// 注意：用中括号查询属性</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：</p><p>获取属性值一般配合 parseInt 取得整数</p><p>为了避免命名冲突，浮动 float 脚本化写法：div.style.<strong>cssFloat</strong>;</p><p>一般通过 className 来切换样式。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript JSON &amp; JS时间线</title>
      <link href="/2019/09/07/JS%20JSON&amp;Time/"/>
      <url>/2019/09/07/JS%20JSON&amp;Time/</url>
      
        <content type="html"><![CDATA[<p> <strong>JS 学习笔记</strong></p><p>以前用XML格式传输数据，现代用JSON；异步加载可提高页面加载速率；JS时间线是初始化JS完后发生的事情过程。</p><hr><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">var</span> obj = <span class="string">'&#123;"name":"ZSC","age":13&#125;'</span></span><br><span class="line"></span><br><span class="line">和 string 互相转换</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">//对象字符串化【前台传入后台】</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(str); <span class="comment">//字符串转为对象【后台传入前台】</span></span><br></pre></td></tr></table></figure><h3 id="渲染树-renderTree"><a href="#渲染树-renderTree" class="headerlink" title="渲染树 renderTree"></a>渲染树 renderTree</h3><ul><li>识别html代码生成dom树</li><li>CSS树生成</li><li>domTree + cssTree = randerTree</li></ul><p>更新渲染树</p><ul><li>reflow：重排整个页面，dom的添删，变化，位置更改</li><li>repaint：重绘小部分，color、background【颜色 / 透明度变化】</li></ul><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>js 原始加载的缺点：加载 js 工具方法没必要阻塞文档，过多js加载会影响页面效率，一旦网速不行后续渲染受影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需加载的方法</span></span><br><span class="line"><span class="comment">// IE方法：等到dom全解析完再执行</span></span><br><span class="line">&lt;script ... defer&gt;...&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ W3C方法：加载完就执行，只用于外部脚本</span></span><br><span class="line"><span class="regexp">&lt;script ... aysnc&gt;...&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装下载完执行函数【按需加载】思想</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, callback</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//先绑定好事件，再加载文件</span></span><br><span class="line">    <span class="keyword">if</span>(script.readyState)&#123;</span><br><span class="line">        </span><br><span class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(script.readyState == <span class="string">"complete"</span> || script.readyState == <span class="string">"loaded"</span>)&#123;<span class="comment">// 兼容IE</span></span><br><span class="line">                callback(); </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                callback();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加载文件，此时事件已绑定</span></span><br><span class="line">        script.src = url;</span><br><span class="line">        <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line">    错误示例：</span><br><span class="line">    loadScript(<span class="string">'demo.js'</span>, test);</span><br><span class="line">    <span class="comment">// test not define[工具未加载完]</span></span><br><span class="line">正确写法：</span><br><span class="line">    loadScript(<span class="string">'demo.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;test();&#125;)</span><br><span class="line"><span class="comment">// 函数调用，按需加载</span></span><br></pre></td></tr></table></figure><h3 id="JS-时间线"><a href="#JS-时间线" class="headerlink" title="JS 时间线"></a>JS 时间线</h3><p>三大步：</p><ol><li>创建 Document 对象</li><li>文档解析完毕</li><li>加载执行完毕</li></ol><p>详细过程：</p><ul><li>创建 Document 对象，解析web页面。document.readyState = ‘loading’;<ul><li>解析HTML元素</li><li>遇到 link 外部 CSS，线程加载，继续解析文档</li><li>遇到不含 async / defer 的script，阻塞，等待完成继续解析文档</li><li>遇到 async / defer，线程加载，继续解析文档【禁止document.write()】</li><li>遇到 img，先解析 DOM 结构，再异步加载 src，继续解析文档</li></ul></li><li>文档解析完毕，DOM构建完。document.readyState = ‘interactive’;【交互】<ul><li>defer 脚本按序执行</li><li>从同步脚本执行转为事件驱动</li><li>async 脚本加载完并执行后，img加载完成后，进入下一阶段</li></ul></li><li>加载执行完毕，此时 window 触发 load 事件。document.readyState = ‘complete’;<ul><li>异步相应方式处理用户输入网络事件等【AJAX…】</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ECMA</title>
      <link href="/2019/09/04/JS%20ECMA/"/>
      <url>/2019/09/04/JS%20ECMA/</url>
      
        <content type="html"><![CDATA[<p> <strong>JS ECMA学习笔记</strong></p><p>ECMA【欧洲计算机制造联合会】 是 JS 的核心知识，本文记录 ECMA 学习过程中的知识点理解和学习笔记。</p><hr><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>预编译，顾名思义，就是脚本执行前的预热编译过程。</p><p>分类：</p><ul><li>变量声明【声明提升，值不提升】</li><li>函数声明【集体提升】</li></ul><p>过程：</p><ol><li>形参声明 (有var的变量)</li><li>实形统一 (函数赋值test(1)，原函数test(a)，则a = 1)</li><li>函数声明</li></ol><p>注意点：</p><ul><li>一切var a = xxx(函数、值等等) ，xxx均不汇入预编译。</li><li>GO{}是全局预编译对象，如果AO{}和GO{}中有相同预编译项，AO执行时优先使用AO中的。</li><li>GO先预编译完后，开始执行，遇到执行函数才生成AO</li><li>预编译会打散 if 中声明变量</li></ul><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">global = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(global); <span class="comment">//undefined, AO自己有global</span></span><br><span class="line">global = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(global);<span class="comment">//200</span></span><br><span class="line"><span class="keyword">var</span> global = <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> global;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">//GO(a : 5, test : func)</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">0</span>;<span class="comment">//这里改的是test()中AO的a</span></span><br><span class="line">    alert(a);<span class="comment">//AO&#123;a:0&#125;</span></span><br><span class="line">    alert(<span class="keyword">this</span>.a);<span class="comment">//GO&#123;a:5&#125;【this指向window】</span></span><br><span class="line">    <span class="keyword">var</span> a;<span class="comment">//这个提前，为AO声明变量</span></span><br><span class="line">    alert(a);<span class="comment">//AO&#123;a:0&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">test();<span class="comment">//生成AO</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//GO&#123;a : 5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>即执行期上下文，存储运行期上下文集合。</p><p>比如一个函数，或一个引用的 js 文件，都是一个作用域</p><p>作用域链：执行期上下文对象集合，<strong>链式连接</strong>，叫作用域链，如函数调用，或引用 JS文件</p><p>注：查找变量由作用域链顶端往下找</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>内部函数被保存到外部生成闭包，导致原作用链不释放，“内存泄漏”。</p><p>简单理解就是函数内的变量被保存到外部，被引用而内存未释放。</p><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">myArr[j]();</span><br><span class="line">&#125;<span class="comment">//10个10</span></span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            arr[x] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或 ES6 中 let</span></span><br><span class="line"><span class="keyword">var</span> myArr = test2();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">myArr[j]();</span><br><span class="line">&#125;<span class="comment">//0 ~ 9</span></span><br></pre></td></tr></table></figure><p>利用闭包，可以创建私有变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//var this = &#123;</span></span><br><span class="line">    <span class="comment">// makeMoney: function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// offer: function()&#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">var</span> money = <span class="number">100</span>; <span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.makeMoney = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        money ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.offer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        money --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sc = <span class="keyword">new</span> Person(zhang);</span><br><span class="line"><span class="keyword">var</span> tc = <span class="keyword">new</span> Person(tcboy);</span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>构造对象的方法</p><ul><li>new Object()</li><li>var obj = {}</li><li>构造函数 new Func();</li></ul><p>遍历对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"d"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(prop))&#123;</span><br><span class="line">        <span class="comment">//测一个对象是否含有特定的自身属性</span></span><br><span class="line">        <span class="comment">//该方法会忽略掉那些从原型链上继承到的属性。</span></span><br><span class="line">        <span class="built_in">console</span>.log(prop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组-amp-类数组"><a href="#数组-amp-类数组" class="headerlink" title="数组 &amp; 类数组"></a>数组 &amp; 类数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [];<span class="comment">//【首推】</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//构造方法</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);<span class="comment">//10个空位</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>];<span class="comment">//1个10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读和写</span></span><br><span class="line">arr[num];<span class="comment">//读，溢出则undefined</span></span><br><span class="line">arr[num] = xx;<span class="comment">//写，可以溢出写(超出数组长度)。中间undefined, 为empty</span></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>增加</th><th>删除</th></tr></thead><tbody><tr><td>正向后插</td><td>push</td><td>pop(剪切，返回剪切值；传参无效)</td></tr><tr><td>反向前插</td><td>unshift</td><td>shift(剪切，返回剪切值；传参无效)</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装push函数</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="keyword">this</span>.length] = <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>改变原数组</th><th>不改变原数组</th></tr></thead><tbody><tr><td>pop push shift unshift sort reverse splice</td><td>concat join split toString slice</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">arr.reverse();<span class="comment">//逆转</span></span><br><span class="line">arr.splice();<span class="comment">//切片</span></span><br><span class="line">arr.sort();<span class="comment">//排序</span></span><br><span class="line"><span class="comment">//-------------//</span></span><br><span class="line">arr.concat();<span class="comment">//拼接</span></span><br><span class="line">arr.slice();<span class="comment">//截取</span></span><br><span class="line">arr.join();<span class="comment">//连接数组为字符串</span></span><br><span class="line">arr.split(<span class="string">""</span>);<span class="comment">//""不可省略，转换字符串为数组</span></span><br><span class="line"></span><br><span class="line">应用：</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//[2,3]</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>);<span class="comment">//[1,5,5,3,4,5,6,7,8,9]</span></span><br><span class="line">arr.splice(<span class="number">3</span>,<span class="number">0</span>,<span class="number">10</span>);<span class="comment">//[1,2,3,10,4,5,6,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a-b;&#125;)<span class="comment">//升序</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> b-a&#125;;)<span class="comment">//降序</span></span><br><span class="line"><span class="comment">//sort的函数引用：1.必有2个形参；2.看返回值：0:不动，正数:后面的在前，负数:前面的在前</span></span><br><span class="line"></span><br><span class="line">arr.join(<span class="string">"-"</span>);</span><br><span class="line">arr.split(<span class="string">"-"</span>);<span class="comment">//必须有引号，至少写""</span></span><br><span class="line">arr.slice(here,end);<span class="comment">//here:从这开始截取，end:截取到该位</span></span><br></pre></td></tr></table></figure><p>类数组：</p><ul><li>可以用属性名模拟数组的特性</li><li>可动态增加length属性</li><li>强行让类数组调用push, 会根据length属性值进行属性扩充</li><li>属性为索引(num)属性，必须有Length属性，最好有push属性</li><li>特点：把对象、数组的属性拼到一起</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>);</span><br><span class="line"><span class="comment">//打印的就是类数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">"0"</span> : <span class="string">"a"</span>,</span><br><span class="line">    <span class="string">"1"</span> : <span class="string">"n"</span>,</span><br><span class="line">    <span class="string">"2"</span> : <span class="string">"w"</span>,</span><br><span class="line">    <span class="string">"3"</span> : <span class="string">"q"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">"length"</span> : <span class="number">4</span>,</span><br><span class="line">    <span class="string">"push"</span> : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">    <span class="string">"splice"</span> : <span class="built_in">Array</span>.prototype.splice<span class="comment">//这个确保打印出数组模型，必须写！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    obj[obj.length] = target;</span><br><span class="line">    obj.length ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>每次 new 一个函数，都会生成一个构造函数，每个构造函数都有原型</p><p>原型：Parent.prototype  生成<strong>共用属性</strong>，原型也是对象</p><p>原型链：Grand.prototype.–proto– == Object.prototype</p><p><strong>注：</strong>通过引用值可更改原型链上的属性</p><p>原理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, height</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//var this = &#123;__proto__: Person.prototype&#125;;</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.way);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return this;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Z = <span class="keyword">new</span> Person(<span class="string">'ZSC'</span>,<span class="number">170</span>);<span class="comment">// 此时上面发生'注释事件'</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一【更改的是引用值】</span></span><br><span class="line">Person.prototype.name = <span class="string">"sunny"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//var this = &#123;__proto__ : Person.prototype&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.name = <span class="string">"rain"</span>;</span><br><span class="line"><span class="comment">//结果name为rain</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二【更改的是整个对象】</span></span><br><span class="line">Person.prototype.name = <span class="string">"sunny"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//var this = &#123;__proto__ : Person.prototype&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : <span class="string">"cherry"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果person的name为sunny，</span></span><br><span class="line"><span class="comment">//Person.prototype.name为cherry</span></span><br><span class="line"><span class="comment">//过程相当于：Person.prototype = &#123;name : a&#125;;</span></span><br><span class="line"><span class="comment">//__proto__ = Person.prototype;</span></span><br><span class="line"><span class="comment">//Person.prototype = &#123;name : b&#125;;</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">x = c</span><br><span class="line">c = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>PS：只有绝大多对象继承自 object.prototype。异类：Object.create(null); </p><p>拓展：</p><ol><li>关于 <strong>constructor(构造器)</strong></li></ol><p>constructor就是一个标记，避免原型链错乱。<br>每创建一个新函数，都会为这个函数创建一个prototype属性，指向函数原型对象，所有原型对象会获得一个constructor属性，是个指向原型prototype所在函数的指针。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">        name : <span class="string">'ZSC'</span>,</span><br><span class="line">        age : <span class="number">24</span>,</span><br><span class="line">        job: <span class="string">'enge'</span>,</span><br><span class="line">        <span class="comment">// constructor: Person</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor);<span class="comment">//原来Object，加上以上语句后为Person</span></span><br><span class="line"></span><br><span class="line">此时<span class="keyword">constructor</span>不指向Person，因为这个对象也获得了<span class="keyword">constructor</span>(指向Object构造函数)，不再指向Person函数。</span><br><span class="line">如果在Person.prototype中添加<span class="keyword">constructor</span> : Person，则可以确保访问到Person。</span><br></pre></td></tr></table></figure><ol start="2"><li>关于<code>__proto__</code></li></ol><p>调用构造函数创建新实例后，该<strong>实例</strong>拥有一个指针(内部属性)，指向<strong>构造函数的原型对象</strong>。[[prototype]]注意的是，这个连接存在于<strong>实例</strong>和<strong>构造函数的原型对象</strong>之间(不是与构造函数)。</p><p>可以理解为实例的 prototype 属性</p><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>原始值若要调用属性，需要进行包装。</p><p>原始值和引用值存储方式不同，原始值栈存储，引用值堆+栈存储</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">4</span>;</span><br><span class="line">num.len = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 相当于执行：</span></span><br><span class="line"><span class="comment">//new Number(4).len = 3;</span></span><br><span class="line"><span class="comment">//delete</span></span><br><span class="line"><span class="built_in">console</span>.log(num.len);<span class="comment">// undefined</span></span><br><span class="line"><span class="comment">//再次新建new Number(4).len，结果undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abcd"</span>;</span><br><span class="line">str.length = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 相当于执行：</span></span><br><span class="line"><span class="comment">//new String('abcd').length = 2</span></span><br><span class="line"><span class="comment">//delete</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//abcd</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//new String('abc').length;(这就是包装类)</span></span><br><span class="line">str2.length;<span class="comment">//访问属性，使好使，构造字符串对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br><span class="line">str += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">typeof</span>(str);</span><br><span class="line"><span class="keyword">if</span>(test.length == <span class="number">6</span>)&#123;</span><br><span class="line">test.sign = <span class="string">"typeof可能返回了String"</span>;</span><br><span class="line"><span class="comment">// new String(test).sign = "typeof可能返回了String";</span></span><br><span class="line"><span class="comment">// delete</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里又newString(test).sign</span></span><br><span class="line"><span class="built_in">console</span>.log(test.sign);<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">Test.call(<span class="number">123</span>);<span class="comment">//会把原始值包装为包装类(对象)</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>传统继承：过多继承了没用属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Grand.prototype.name = <span class="string">"ji"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> grand = Grand();</span><br><span class="line">Son.prototype = grand;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure><p>构造函数：不能继承借用构造函数原型，每次构造多走一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, grade</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age, sex);</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>共享原型：不能随意改动自己原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Father.prototype.lastName = <span class="string">"z"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Son.prototype = Father.prototype;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Baby, Parent</span>)</span>&#123;</span><br><span class="line">    Baby.prototype = Parent.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圣杯模式：优化继承，子不干扰父</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">baby, parent</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    F.prototype = parent.prototype;</span><br><span class="line">    baby.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    baby.prototype.constructor = baby;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><p>克隆即克隆对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅克隆，互相影响</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">ori, tar</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tar = tar || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> ori)&#123;</span><br><span class="line">        tar[prop] = ori[prop];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深克隆，各自独立</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">ori, tar</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tar = target || &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> arrStr = <span class="string">"[object Array]"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> ori)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ori.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="keyword">if</span>(ori[prop] != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span>(ori[prop]) == <span class="string">'object'</span>)&#123;</span><br><span class="line">                tar[prop] = (<span class="built_in">Object</span>.prototype.toString.call(ori[prop]) == arrStr) ? [] : &#123;&#125;;</span><br><span class="line">                deepClone(ori[prop], tar[prop]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tar[prop] = ori[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ul><li><p>全局作用域中 this 指向 window</p></li><li><p>函数预编译，this也指向window</p></li><li><p>通过call 和 apply 来改变 this 指向</p></li><li><p>谁调用某个函数，this就指向谁</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"222"</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    name : <span class="string">"111"</span>;</span><br><span class="line">    say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = a.say;</span><br><span class="line">fun();</span><br><span class="line">a.say();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    name : <span class="string">"333"</span>,</span><br><span class="line">    say : <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.say(a.say);</span><br><span class="line">b.say = a.say;</span><br><span class="line">b.say();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变式1</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    name : <span class="string">"333"</span>,</span><br><span class="line">    say : <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.say(a.say);</span><br><span class="line">b.say();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变式2</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    name : <span class="string">"333"</span>,</span><br><span class="line">    say : <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.say(a.say);</span><br><span class="line">b.say();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Call-amp-apply"><a href="#Call-amp-apply" class="headerlink" title="Call &amp; apply"></a>Call &amp; apply</h3><p>改变 this 指向，call 传入 <strong>逐个参数</strong>，apply 传入 <strong>参数数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Eat</span>(<span class="params">beef, poke, fish</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.beef = beef;</span><br><span class="line">    <span class="keyword">this</span>.poke = poke;</span><br><span class="line">    <span class="keyword">this</span>.fish = fish;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Buy</span>(<span class="params">beef,poke, fish, fruit, rice</span>)</span>&#123;</span><br><span class="line">    Eat.apply(<span class="keyword">this</span>,[beef, poke, fish]);</span><br><span class="line">    <span class="keyword">this</span>.fruit = fruit;</span><br><span class="line">    <span class="keyword">this</span>.rice = rice;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buyer = <span class="keyword">new</span> Buy(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>);</span><br></pre></td></tr></table></figure><h3 id="try…catch-amp-ES5"><a href="#try…catch-amp-ES5" class="headerlink" title="try…catch &amp; ES5"></a>try…catch &amp; ES5</h3><p>try…catch</p><ul><li>try中若发生错误，不执行错误语句后的代码，直接跳出作用域继续执行</li></ul><p>有两种错误：</p><ul><li><p>语法解析错误 SyntaxError</p><ul><li>中文字符、缺双引号等</li></ul></li><li><p>非法 / 引用数值错误 ReferenceError</p><ul><li>未声明的变量</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);<span class="comment">// 不执行</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.name + <span class="string">" : "</span> + e.message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'d'</span>);<span class="comment">// 继续执行</span></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line"><span class="built_in">ReferenceError</span> : b is not defined</span><br><span class="line">d</span><br></pre></td></tr></table></figure><p>ES5</p><p>严格模式，规范了语法，使开发有秩序。</p><p>使用方法：</p><ul><li>全局：页面逻辑顶端 “use strict”</li><li>局部：局部函数首句”use strict”</li></ul><p>规则：</p><ol><li><strong>变量必须声明</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//window</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">Test();<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">new</span> Test();<span class="comment">//Test&#123;&#125;(即该对象的constructor的名)</span></span><br><span class="line">Test.call(&#123;&#125;);<span class="comment">//object&#123;&#125;</span></span><br><span class="line">Test.call(<span class="number">123</span>);<span class="comment">//123，若3.0会把原始值包装为包装类</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>禁止重复参数、重复属性</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name, name</span>)</span>&#123;<span class="comment">//5.0禁用重复参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//2</span></span><br><span class="line">test(<span class="number">1</span>);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>禁用 argument.callee</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注：函数自身调用：<span class="number">100</span>阶乘</span><br><span class="line"><span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * <span class="built_in">arguments</span>.callee(x - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>禁用 eval()</strong> ，3.0也禁用，会改变作用域</li><li><strong>禁用 with()</strong>，会改变作用域链，使内部代码的作用域为参数对象的作用域</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">"a"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"b"</span>;</span><br><span class="line">    <span class="keyword">with</span>(obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);<span class="comment">// 打印a。寻找顺序：OBJ=》TEST=》GO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>JS 仿 jQuery 链式调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = &#123;</span><br><span class="line">    ev1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ev1'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    ev2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ev2'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    ev3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ev3'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">x.ev1().ev2().ev3();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS 知识体系</title>
      <link href="/2019/09/03/%E7%95%85%E8%B0%88CSS/"/>
      <url>/2019/09/03/%E7%95%85%E8%B0%88CSS/</url>
      
        <content type="html"><![CDATA[<p><strong>HTML+CSS 的知识框架梳理</strong></p><p>本文结合 winter 老师 《重学前端》系列课程结合自己已学知识，构建起来的 HTML + CSS 知识体系。<br>随着学习深入，会不定期更新，欢迎留言讨论~</p><hr><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul><li><p>元素</p><ul><li><p>文档元信息：有些是专门用于SEO的</p><ul><li><p>head：盛放其他语义类标签容器</p></li><li><p>title：表示文档标题</p></li><li><p>base：历史遗留标签，只有一个，用于改变全局的链接网址，几乎不用</p></li><li><p>meta：键值对，通用的元信息表示标签 含name 和 content【H5 的 charset 编码属性】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt; 放在 head 第一个，确保 HTML 编码格式的正确</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">""</span>&gt; 移动端的开发标准</span><br><span class="line">&lt;meta name=<span class="string">"author/description/application-name/keywords/referrer"</span> content=<span class="string">"balabala"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;指定http编码方式</span><br><span class="line">其他：</span><br><span class="line">    content-language:指定内容语言</span><br><span class="line">        <span class="keyword">default</span>-style:制定默认样式表</span><br><span class="line">        refresh:刷新</span><br><span class="line">        <span class="keyword">set</span>-cookie:模拟http头<span class="keyword">set</span>-cookie,设置cookie</span><br></pre></td></tr></table></figure></li></ul></li><li><p>语义标签</p></li><li><p>表单表格</p></li><li><p>替换型标签</p><ul><li>凡是替换型元素，都用 src 来引用文件的（style标签并非替换型元素）</li><li>img：性能角度考虑，固定图片宽高，避免尺寸发生变化触发重排。</li></ul></li><li><p>链接标签 </p><ul><li><p>link：通过rel成为特定的link标签</p><ul><li>canonical(权威的，主URL)</li><li>alternate(替换，RSS订阅)</li><li>prev、next：网页序列有助于页面批量展示</li><li>外部资源类：<ul><li>icon</li><li>dns-prefetch：提前对一个域名做DNS查询 ( href只有域名有意义 ) </li><li>preconnect：提前对一个服务器建立tcp连接</li><li>prefetch：提前取 href 指定的 url 内容</li><li>preload：提前加载 href 指定的 url 内容</li><li>prerender：提前渲染 href 指定的 url 内容</li><li>modulepreload：预先加载JS模块，保证 ( 多个 )  JS 模块不必在执行时才加载，下载并放入内存（并行下载提高性能）</li><li>stylesheet：样式表导入，配合 type=”text/css”（默认）</li><li>pingback：表示网页被引用</li></ul></li></ul></li><li><p>a标签：anchor锚点的意思，标识文档中特定位置，文本型超链接</p><ul><li>href 属性，链接</li><li>name 属性：链接目标</li><li>rel 属性参考文档</li></ul></li><li><p>area标签：非文本型链接，区域型链接</p><ul><li><p>shape属性：搭配 map 使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"shapes.jpg"</span> <span class="attr">usemap</span>=<span class="string">"shapes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"shapes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"50,50,100,100"</span>&gt;</span><span class="tag">&lt;/<span class="name">area</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>圆形 circle circ coords (x, y, r)</li><li>矩形 coords (x1, y1) / (x2, y2)</li><li>多边形 poly &gt;=6个值，表示多边形各个顶点</li></ul></li></ul></li></ul></li></ul></li><li><p>语言</p><ul><li>语法：源自 SGML <ul><li>标签 Element   <code>&lt;tagname&gt;...&lt;/tagname&gt;</code></li><li>文本 Text</li><li>注释</li><li>DTD document type defination 文档类型定义，</li><li>处理信息 ProcessingIntruction</li></ul></li><li>命名空间</li></ul></li><li><p>补充标准</p><ul><li>ARIA：Accessible Rich Internet Applications 可访问性标准，提高页面可访问性<ul><li>设备访问</li><li>环境、人群访问友好性</li><li>核心属性 role<ul><li>widget：可交互组件=》控件【Slider、Timer、Radio等】</li><li>structure：文档中的结构</li><li>window：窗体</li></ul></li></ul></li></ul></li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li><p>语言</p><ul><li><p>选择器</p><ul><li><p>简单：某一特征</p><ul><li>类型选择器：选择svg中的a - svg|a {}</li><li>全体选择器</li><li>id选择器</li><li>class选择器</li><li>属性选择器：根据元素属性选中<ul><li>div[att]</li><li>div[att=”val”]</li></ul></li><li>伪类选择器：含普通型和函数型<ul><li>树结构关系伪类选择器：<ul><li>:root</li><li>:empty：无子节点，空文本结点除外</li><li>:nth-child(even)  </li><li>:nth-child(4n - 1) </li></ul></li><li>链接与行为伪类选择器：<ul><li>:any-link</li><li>:link :hover: visited :active</li><li>:focus</li><li>:target</li></ul></li><li>逻辑伪类选择器：<ul><li>:not</li></ul></li></ul></li></ul></li><li><p>复合：连写 div:nth-of-type(1)</p></li><li><p>复杂：符号连接 div&gt;ul li</p><p>.c, .a&gt;.b.d</p><ul><li>.c</li><li>.a&gt;.b.d<ul><li>.a</li><li>.b.d<ul><li>.b</li><li>.d</li></ul></li></ul></li></ul><p>“ ”：后代</p><p>“&gt;”：子代</p><p>“<del>“：后继，.a</del>.b同父，排在a的后面中b的结点</p><p>“+”：后继，直接后继一个</p></li><li><p>列表：逗号分隔的复杂选择器 div span, ul li</p></li><li><p>伪元素</p><ul><li><p>::first-line：第一行，必须出现在最内层的块级元素之内。</p></li><li><p>::first-letter：第一字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p::first-letter&#123;</span><br><span class="line">    text-transform: uppercase;</span><br><span class="line">    font-size:2em;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>::before</p></li><li><p>::after，必有content</p></li></ul></li></ul></li><li><p>单位</p></li><li><p>@rule</p><ul><li><p>charset：提示编码方式 @charset “utf-8”;</p></li><li><p>import：引入一个CSS文件 @import “index.css”;</p></li><li><p>media：对设备类型进行判断 @media</p></li><li><p>page：分页媒体访问网页时表现设置，页面是特殊的盒模型结构，除页面本身可设置周围的盒</p><p>@page {margin: 10px;}</p></li><li><p>keyframes：动画关键帧 @keyframe dm{from {} to {}}</p></li><li><p>font-face：字体 @font-face {font-family: xxx; src: url(…); }    p{ font-family: xxx}</p></li><li><p>support：检查环境特性，与media 比较类似</p></li><li><p>viewport：兼容不是很好，被HTML的 meta 代替</p></li></ul></li></ul></li><li><p>功能</p><ul><li>布局<ul><li>正常流：依次排列，排不下换行。<ul><li>原理：用inline-block作为内容容器，利用块级格式化上下文纵向排布和行内级格式化上下文横向排布完成布局。</li></ul></li><li>弹性布局<ul><li>flex：分行、计算主轴、计算交叉轴</li></ul></li></ul></li><li>绘制<ul><li>颜色形状<ul><li>RGB：可构成所有颜色</li><li>CMYK：三原色( 品红、黄、青 ) + 黑色</li><li>HSL：色相、纯度、明度</li><li>RGBA：Alapha 色彩空间</li><li>渐变<ul><li>线性：linear-gradient(dir, color1, color2);    dir: to top left / 123deg</li><li>放射性：radial-gradient(centerPoint, color1, color2) </li></ul></li></ul></li><li>文字文本</li></ul></li><li>交互<ul><li>动画<ul><li>animation<ul><li>animation-duration 动画时长</li><li>animation-name 动画名</li><li>animation-timing-function 时间曲线</li><li>animation-delay 动画延迟</li><li>animation-iteration-count 动画播放次数</li><li>animation-direction 动画方向</li></ul></li><li>transition<ul><li>transition-property 变化属性</li><li>transition-duration 变换时长</li><li>transition-timing-function 时间曲线</li><li>transition-delay 动画延迟</li></ul></li></ul></li><li>其他交互</li></ul></li></ul></li></ul><p>### </p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 知识体系</title>
      <link href="/2019/09/02/%E7%95%85%E8%B0%88JavaScript/"/>
      <url>/2019/09/02/%E7%95%85%E8%B0%88JavaScript/</url>
      
        <content type="html"><![CDATA[<p> <strong>JS 的知识框架梳理</strong></p><p>本文结合 winter 老师 《重学前端》系列课程结合自己已学知识，构建起来的 JS 知识体系。<br>随着学习深入，会不定期更新，欢迎留言讨论~</p><hr><h3 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h3><h4 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h4><ul><li>空白字符<ul><li>\t  缩进TAB符</li><li><code>&amp;nbsp;</code> 非断行空格，避免因空格在此处发生断行。JS编辑环境当作普通空格</li></ul></li><li>换行符<ul><li>\n 正常换行符</li><li>\r\n “回车”，在字符串中是 \r ，在 Windows 中是 \r\n</li></ul></li><li>注释<ul><li>单行 //</li><li>多行 /**/</li></ul></li><li>Token 词 ( 标记 )<ul><li>标识符<ul><li>$ _ a 开头</li><li>关键字：await break case catch class const continue debugger default delete do else export enum </li></ul></li><li>数字直接量<ul><li>12.toString() 被当作省略小数点后面部分数字而看成一个整体，要加空格才能成为标记Token</li><li>科学记数法：10.24E+2</li><li>box开头：0b: 二进制；0o: 八进制；0x: 十六进制</li></ul></li><li>字符串直接量<ul><li>单双引号都 ok</li></ul></li><li>正则表达式直接量<ul><li>Body + Flags：/[/]/g</li></ul></li><li>字符串模板<ul><li>整体， ${ 普通标识符 } 是并列关系</li></ul></li></ul></li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>三种语法结构：脚本 模块 函数体</p><p>加分号是个好习惯，继续保存就对了。</p><p>JS语法基本规则：</p><p>源文件：</p><ul><li>脚本：由宿主引入执行，主动性代码段，控制宿主完成一定任务<ul><li>语句</li></ul></li><li>模块：由 JS import 引入执行，被动性代码段，等待被调用的库<ul><li>import 声明<ul><li>直接 import</li><li>带from: import {v, a} from “mod”</li></ul></li><li>export 声明<ul><li>独立使用 export：export {a, b, c}</li><li>直接在声明型语句前添加 export：export function a() {}</li></ul></li><li>语句<ul><li>export default：默认导出，配合 function class 使用</li></ul></li></ul></li></ul><p>函数体：语句的列表，多了return语句可以使用</p><ul><li>普通函数体 function(){}</li><li>异步函数体 async function(){}</li><li>生成器函数体 function *foo() {}</li><li>异步生成器函数体</li></ul><p>生成器函数体能 yield；异步函数体能 await</p><p>JS语法的全局机制：</p><ul><li><p>预处理：JS 执行前对脚本模块函数体中语句进行预处理。提前处理 var 函数声明 class const let，确定其中变量的意义</p><ul><li><p>var：var的作用能<strong>穿透一切语句</strong>结构，只认三法；破解：IIFE 立即执行函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// a = undefined【预处理】</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">with</span>(o) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">2</span>;<span class="comment">// 预处理提前a，此执行作用域为o，改变了o.a</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(o.a);<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line">闭包问题：全局只有一个i，执行完循环后，i变<span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>function：整体提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);<span class="comment">// undefined，无穿透性</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>class：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">c</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">foo();<span class="comment">// 抛错，class 会预处理，在作用域中创建变量，要求访问它时抛错。无穿透。</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>指令序言机制</p><ul><li><p>use strict</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;no lint&quot;;</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">不检查lint</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>语句</p><ul><li><p>普通语句：执行过程</p><ul><li><p>语句块：产生作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> x, y;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">    y = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>空语句 ; 为语言设计完备性角度考虑</p></li><li><p>表达式语句</p><p>表达式，由运算符 直接变量 / 直接量 构成</p><ul><li><p>主要表达式【Primary Expression】：直接量</p><p>“abc”</p><p>123 </p><p>null </p><p>true </p><p>this </p><p>(a + b)</p></li><li><p>成员表达式【Member Expression】：访问对象成员</p><p>a.b </p><p>a[“b”] </p><p>super.b：构造器中用于访问父类的属性的语法</p><p>new.target：新加入的语法，用于判断函数是否被 new 调用</p></li><li><p>赋值表达式【Assignment Expression】</p><p>a = b：等号赋值</p><p>a = b = c = d 相当于 a = (b = (c = d))【不推荐】</p></li><li><p><strong>乘方表达式</strong>：3 ** 2 == 9，<code>3**2**2</code> == 81</p></li><li><p>相等表达式</p><p>==的三条规则：</p><ul><li><p>undefined == null</p></li><li><p>String 和 boolean 都化为 数字 再比较</p><p>true != “true” 【1 != “true”】</p></li><li><p>对象化为 原始值 再比较</p><p>[] == 0</p><p>[] == false</p><p>new Boolean(‘false’) != false;</p><p>new Boolean(‘false’) == true;</p></li></ul></li></ul></li><li><p>if</p></li><li><p>switch：继承自 C C++</p></li><li><p>循环 </p><ul><li><p>( do{}while 必执行一次 )</p></li><li><p>for in 枚举对象属性，关联到 enumberable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let o = &#123;a:10, b:20&#125;;</span><br><span class="line">Object.defineProperty(o, &quot;c&quot;, &#123;enumberable: false, value: 30&#125;);</span><br><span class="line">for(let p in o)&#123;</span><br><span class="line">    console.log(p); // a, b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for of 循环，背后机制是 iterator </p></li></ul></li><li><p>return </p></li><li><p>break 跳出循环</p></li><li><p>continue 结束本次循环并继续下一次循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">outer: <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++)&#123;</span><br><span class="line">    inner: <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">50</span> &amp;&amp; j == <span class="number">50</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">outer: <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++)&#123;</span><br><span class="line">    inner: <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">50</span> &amp;&amp; j == <span class="number">50</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> outer</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>with：吧对象属性在他内部作用域内变成变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">with</span>(o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>throw</p></li><li><p>try</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"error"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);<span class="comment">// 捕获异常并处理</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"finally"</span>); <span class="comment">// 执行后执行的清理工作，释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>debugger：在此断点，需挂载调试器！</p></li></ul></li><li><p>声明语句：响应预处理！</p><ul><li><p>var</p></li><li><p>let</p></li><li><p>const</p><p>let 和 const 在作用域内有效，都有预处理机制</p></li><li><p>class</p><p>块级作用域，预处理时屏蔽外部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">// 抛错</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数，属性只能写在这里面</span></span><br><span class="line">    <span class="keyword">constructor</span> (height, width) &#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter / setter</span></span><br><span class="line">    <span class="keyword">get</span> area()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.calcArea();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Method</span></span><br><span class="line">    calcArea() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数声明</p><ul><li><p>普通函数</p></li><li><p>异步async 函数：暂停执行，等待异步操作的函数，底层是 Promise 机制</p></li><li><p>generator 函数：返回一个序列的函数，底层是 iterator 机制</p></li><li><p>async generator 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a = <span class="number">1</span>, ...other</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, other);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><h3 id="进行时"><a href="#进行时" class="headerlink" title="进行时"></a>进行时</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><hr><p><strong>七种类型</strong>：Number、String、Boolean、Undefined、Null、Object、Symbol</p><p><strong>typeof</strong>：number、string、boolean、undefined、object、symbol、function</p><ul><li><p>Undefined 和 Null    </p><p>undefined 是个变量，在局部变量中可修改，全局不行；null 是关键字，表示定义了但为空</p></li><li><p>String 的意义并非字符串，而是字符串的 utf-16 编码</p></li><li><p>Symbol 是 ES6 中引入的新类型，是一切非字符串对象 key 的集合</p></li><li><p>Object 定义是“属性的集合”，属性分为数据属性和访问器属性，都是 key-value 结构，key 可为字符串 / Symbol</p></li><li><p>JS 中 “类” 仅仅是运行时对象的一个私有属性，JS 其中的 Number String Boolean Symbol 都是基本类型，都在对象类型中。比如说：3 和 new Number(3)；其中一个是 Number 类型，一个是对象类型。Number、String、Boolean 通过 new X() 出来的，是对象，而不是原始值。</p></li><li><p><strong>类型转换</strong></p><ul><li><p>装箱转换</p><p>把 基本类型 转换为 对应对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> som = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;).call(<span class="built_in">Symbol</span>(<span class="string">"a"</span>));</span><br><span class="line"><span class="keyword">typeof</span> som ==&gt; object</span><br><span class="line">som <span class="keyword">instanceof</span> <span class="built_in">Symbol</span> ==&gt; <span class="literal">true</span></span><br><span class="line">som.constructor == <span class="built_in">Symbol</span> ==&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>拆箱转换</p><p>把 对象类型 转为 基本类型</p><p>尝试调用 valueOf 和 toString</p></li></ul></li></ul><p><strong>深谈对象：</strong>JS 是高度动态性的面向对象语言。</p><p>对象分类：</p><ol><li>可触摸或看得见的东西</li><li>智力可以理解的东西</li><li>可以指导思考或行动的东西</li></ol><p>对象特征：</p><ol><li>唯一<strong>标识性</strong>：完全相同二对象也非同一对象【内存地址不同】</li><li>对象有<strong>状态</strong>：同一对象可能处于不同状态之下【属性】</li><li>对象有<strong>行为</strong>：对象状态可能因行为产生变迁【属性 / 方法】</li><li>对象是一个属性的索引结构，通过 key 查找 value。</li></ol><p>JS 标准对 对象 的定义：语言 和 宿主 的 基础设施 由 对象 提供，且 JS 程序是一系列 互相通讯 的 对象集合。<br>JS 的对象具有高度动态性，JS 赐予使用设在运行时为对象 添加 / 更改 状态行为 的能力。<br>JS 的 属性 提供了数据属性 和 访问器属性</p><ul><li>数据属性：value / writable / enumerable / configurable</li><li>访问器属性：允许读写属性时得到不同的值，函数的语法糖<br>getter / setter / enumerable / configurable</li></ul><p>JS 中对象分类</p><ul><li><p>宿主对象【浏览器、node】</p></li><li><p>内置对象</p><ul><li><p>固有对象【JS运行时创建而自动创建对象实例如 class】由标准规定 150+</p></li><li><p>原生对象【Array、RegExp】为了特定能力 / 性能而设计出来的“特权对象”</p><p>Boolean String Number Object Symbol Array Date RegExp</p><p>函数对象：具有 [[call]] 私有字段的对象</p><p>构造器对象：具有 [[construct]] 私有字段的对象</p><p>function 创建的函数必定同时是函数和构造器。表现出来的行为不同</p></li><li><p>普通对象【{}，能被原型继承】</p></li></ul></li></ul><p>JS 本身面向对象，但实现面向对象方式有点不同，模拟基于类的面向对象。</p><p>JS 选择的是 <strong>原型系统</strong> 来抽象对象形式。</p><p>原型是什么：</p><p>“基于类”：先有类，再实例化对象。类与类间可能形成继承、组合等关系。类又与语言的类型系统整合。【猫科=》老虎】<br>“基于原型”：先有实例行为，再将对象划分到最近使用方式相似的原型对象。【美洲狮=》猫科】</p><p>原型系统</p><ul><li>【原型链】读某个属性，本身=》原型链 proto 直到 null</li><li>【原型】对象拥有私有字段[[prototype]]</li></ul><p>操控原型：</p><ul><li>根据原型创建对象：Object.create(obj,{})</li><li>取得对象原型：Object.getPrototypeOf()</li><li>设置对象原型：Object.setPrototypeOf()</li></ul><p>new 的原理：</p><ul><li>以构造器 prototype 属性为原型，创建新对象</li><li>将 this 和 调用参数传给构造器【函数】并执行</li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><hr><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><h5 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h5><p>操作系统中等待的行为都是一个事件循环，宏观任务的队列相当于事件循环</p><p>认知：JS引擎常驻与内存，等待宿主 (浏览器) 将JS代码 / 函数 传给它执行</p><p>宿主发起的任务称为宏观任务【宏任务可能执行的代码包括“脚本”“模块”“函数体”】</p><p>JS 引擎发起的任务成为微观任务</p><p>许多微观任务组成宏观任务。微任务总会在下一个宏任务之前执行，在本身宏任务执行完后立即执行。</p><p>对应 ES6 中 Promise 和 await、async特性 的结合用法</p><p>async 使得函数返回 Promise，所有返回的 Promise 函数认为是异步函数<br>在 async函数 中 使用 await 来等待一个 Promise，async 和 await 都是微观任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 红绿灯 demo</span></span><br><span class="line">main();</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">await</span> change(<span class="string">'green'</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">await</span> change(<span class="string">'yellow'</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">await</span> change(<span class="string">'red'</span>, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">color, time</span>) </span>&#123;</span><br><span class="line">    dom.style.backgroundColor = color;</span><br><span class="line">    <span class="keyword">await</span> sleep(time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(res, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or<span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">green;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">yellow;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">red;</span><br><span class="line">setTimeout(change, <span class="number">3000</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="微任务执行"><a href="#微任务执行" class="headerlink" title="微任务执行"></a>微任务执行</h5><h5 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h5><p>函数：</p><ul><li>普通函数：async function() {}</li><li>箭头函数：async () =&gt; {}</li><li>class 函数：class C { foo(){} }</li><li>生成器函数：async function* foo() {}</li><li>类 class Foo { constructor(){} }</li></ul><p>new 只能和普通函数、类使用（无异步async）</p><p>闭包：编程语言领域表示一种函数。“带有函数的函数”。</p><p>组成：</p><ul><li>环境<ul><li>环境：：函数的词法环境</li><li>标识符：函数中未声明变量</li></ul></li><li>表达式：函数体</li></ul><p>执行上下文：执行的基础措施，一段代码(包含函数) 执行所需的所有信息。</p><p>在只有var没有let的JS时代，通过立即执行函数表达式 IIFE 创建一个函数马上执行以构造一个新的域，从而控制var范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)()</span><br></pre></td></tr></table></figure><p>let 块级作用域。</p><h5 id="语句执行"><a href="#语句执行" class="headerlink" title="语句执行"></a>语句执行</h5><p>普通的语句：不带控制力</p><ul><li>声明类：var const let 函数声明 类声明</li><li>表达式：a += c</li><li>空语句</li><li>debugger</li></ul><p>语句块：加大括号的一组语句</p><p>控制型语句：对内部/外部造成影响，try / catch 执行完毕，使得 normal 型完成记录，也必须执行 finally</p><p>带标签的语句：firstStatement: var i = 1; 作用类式于注释，没任何用处，与完成时记录类型中的 target 相配合，跳出多层循环。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
