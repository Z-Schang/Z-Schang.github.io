<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML+CSS 知识体系</title>
      <link href="/2019/09/03/%E7%95%85%E8%B0%88CSS/"/>
      <url>/2019/09/03/%E7%95%85%E8%B0%88CSS/</url>
      
        <content type="html"><![CDATA[<p><strong>HTML+CSS 的知识框架梳理</strong></p><p>本文结合 winter 老师 《重学前端》系列课程结合自己已学知识，构建起来的 HTML + CSS 知识体系。<br>随着学习深入，会不定期更新，欢迎留言讨论~</p><hr><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul><li><p>元素</p><ul><li><p>文档元信息：有些是专门用于SEO的</p><ul><li><p>head：盛放其他语义类标签容器</p></li><li><p>title：表示文档标题</p></li><li><p>base：历史遗留标签，只有一个，用于改变全局的链接网址，几乎不用</p></li><li><p>meta：键值对，通用的元信息表示标签 含name 和 content【H5 的 charset 编码属性】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt; 放在 head 第一个，确保 HTML 编码格式的正确</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">""</span>&gt; 移动端的开发标准</span><br><span class="line">&lt;meta name=<span class="string">"author/description/application-name/keywords/referrer"</span> content=<span class="string">"balabala"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;指定http编码方式</span><br><span class="line">其他：</span><br><span class="line">    content-language:指定内容语言</span><br><span class="line">        <span class="keyword">default</span>-style:制定默认样式表</span><br><span class="line">        refresh:刷新</span><br><span class="line">        <span class="keyword">set</span>-cookie:模拟http头<span class="keyword">set</span>-cookie,设置cookie</span><br></pre></td></tr></table></figure></li></ul></li><li><p>语义标签</p></li><li><p>表单表格</p></li><li><p>替换型标签</p><ul><li>凡是替换型元素，都用 src 来引用文件的（style标签并非替换型元素）</li><li>img：性能角度考虑，固定图片宽高，避免尺寸发生变化触发重排。</li></ul></li><li><p>链接标签 </p><ul><li><p>link：通过rel成为特定的link标签</p><ul><li>canonical(权威的，主URL)</li><li>alternate(替换，RSS订阅)</li><li>prev、next：网页序列有助于页面批量展示</li><li>外部资源类：<ul><li>icon</li><li>dns-prefetch：提前对一个域名做DNS查询 ( href只有域名有意义 ) </li><li>preconnect：提前对一个服务器建立tcp连接</li><li>prefetch：提前取 href 指定的 url 内容</li><li>preload：提前加载 href 指定的 url 内容</li><li>prerender：提前渲染 href 指定的 url 内容</li><li>modulepreload：预先加载JS模块，保证 ( 多个 )  JS 模块不必在执行时才加载，下载并放入内存（并行下载提高性能）</li><li>stylesheet：样式表导入，配合 type=”text/css”（默认）</li><li>pingback：表示网页被引用</li></ul></li></ul></li><li><p>a标签：anchor锚点的意思，标识文档中特定位置，文本型超链接</p><ul><li>href 属性，链接</li><li>name 属性：链接目标</li><li>rel 属性参考文档</li></ul></li><li><p>area标签：非文本型链接，区域型链接</p><ul><li><p>shape属性：搭配 map 使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"shapes.jpg"</span> <span class="attr">usemap</span>=<span class="string">"shapes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"shapes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"50,50,100,100"</span>&gt;</span><span class="tag">&lt;/<span class="name">area</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>圆形 circle circ coords (x, y, r)</li><li>矩形 coords (x1, y1) / (x2, y2)</li><li>多边形 poly &gt;=6个值，表示多边形各个顶点</li></ul></li></ul></li></ul></li></ul></li><li><p>语言</p><ul><li>语法：源自 SGML <ul><li>标签 Element   <code>&lt;tagname&gt;...&lt;/tagname&gt;</code></li><li>文本 Text</li><li>注释</li><li>DTD document type defination 文档类型定义，</li><li>处理信息 ProcessingIntruction</li></ul></li><li>命名空间</li></ul></li><li><p>补充标准</p><ul><li>ARIA：Accessible Rich Internet Applications 可访问性标准，提高页面可访问性<ul><li>设备访问</li><li>环境、人群访问友好性</li><li>核心属性 role<ul><li>widget：可交互组件=》控件【Slider、Timer、Radio等】</li><li>structure：文档中的结构</li><li>window：窗体</li></ul></li></ul></li></ul></li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li><p>语言</p><ul><li><p>选择器</p><ul><li><p>简单：某一特征</p><ul><li>类型选择器：选择svg中的a - svg|a {}</li><li>全体选择器</li><li>id选择器</li><li>class选择器</li><li>属性选择器：根据元素属性选中<ul><li>div[att]</li><li>div[att=”val”]</li></ul></li><li>伪类选择器：含普通型和函数型<ul><li>树结构关系伪类选择器：<ul><li>:root</li><li>:empty：无子节点，空文本结点除外</li><li>:nth-child(even)  </li><li>:nth-child(4n - 1) </li></ul></li><li>链接与行为伪类选择器：<ul><li>:any-link</li><li>:link :hover: visited :active</li><li>:focus</li><li>:target</li></ul></li><li>逻辑伪类选择器：<ul><li>:not</li></ul></li></ul></li></ul></li><li><p>复合：连写 div:nth-of-type(1)</p></li><li><p>复杂：符号连接 div&gt;ul li</p><p>.c, .a&gt;.b.d</p><ul><li>.c</li><li>.a&gt;.b.d<ul><li>.a</li><li>.b.d<ul><li>.b</li><li>.d</li></ul></li></ul></li></ul><p>“ ”：后代</p><p>“&gt;”：子代</p><p>“<del>“：后继，.a</del>.b同父，排在a的后面中b的结点</p><p>“+”：后继，直接后继一个</p></li><li><p>列表：逗号分隔的复杂选择器 div span, ul li</p></li><li><p>伪元素</p><ul><li><p>::first-line：第一行，必须出现在最内层的块级元素之内。</p></li><li><p>::first-letter：第一字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p::first-letter&#123;</span><br><span class="line">    text-transform: uppercase;</span><br><span class="line">    font-size:2em;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>::before</p></li><li><p>::after，必有content</p></li></ul></li></ul></li><li><p>单位</p></li><li><p>@rule</p><ul><li><p>charset：提示编码方式 @charset “utf-8”;</p></li><li><p>import：引入一个CSS文件 @import “index.css”;</p></li><li><p>media：对设备类型进行判断 @media</p></li><li><p>page：分页媒体访问网页时表现设置，页面是特殊的盒模型结构，除页面本身可设置周围的盒</p><p>@page {margin: 10px;}</p></li><li><p>keyframes：动画关键帧 @keyframe dm{from {} to {}}</p></li><li><p>font-face：字体 @font-face {font-family: xxx; src: url(…); }    p{ font-family: xxx}</p></li><li><p>support：检查环境特性，与media 比较类似</p></li><li><p>viewport：兼容不是很好，被HTML的 meta 代替</p></li></ul></li></ul></li><li><p>功能</p><ul><li>布局<ul><li>正常流：依次排列，排不下换行。<ul><li>原理：用inline-block作为内容容器，利用块级格式化上下文纵向排布和行内级格式化上下文横向排布完成布局。</li></ul></li><li>弹性布局<ul><li>flex：分行、计算主轴、计算交叉轴</li></ul></li></ul></li><li>绘制<ul><li>颜色形状<ul><li>RGB：可构成所有颜色</li><li>CMYK：三原色( 品红、黄、青 ) + 黑色</li><li>HSL：色相、纯度、明度</li><li>RGBA：Alapha 色彩空间</li><li>渐变<ul><li>线性：linear-gradient(dir, color1, color2);    dir: to top left / 123deg</li><li>放射性：radial-gradient(centerPoint, color1, color2) </li></ul></li></ul></li><li>文字文本</li></ul></li><li>交互<ul><li>动画<ul><li>animation<ul><li>animation-duration 动画时长</li><li>animation-name 动画名</li><li>animation-timing-function 时间曲线</li><li>animation-delay 动画延迟</li><li>animation-iteration-count 动画播放次数</li><li>animation-direction 动画方向</li></ul></li><li>transition<ul><li>transition-property 变化属性</li><li>transition-duration 变换时长</li><li>transition-timing-function 时间曲线</li><li>transition-delay 动画延迟</li></ul></li></ul></li><li>其他交互</li></ul></li></ul></li></ul><p>### </p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 知识体系</title>
      <link href="/2019/09/02/%E7%95%85%E8%B0%88JavaScript/"/>
      <url>/2019/09/02/%E7%95%85%E8%B0%88JavaScript/</url>
      
        <content type="html"><![CDATA[<p> <strong>JS 的知识框架梳理</strong></p><p>本文结合 winter 老师 《重学前端》系列课程结合自己已学知识，构建起来的 JS 知识体系。<br>随着学习深入，会不定期更新，欢迎留言讨论~</p><hr><h3 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h3><h4 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h4><ul><li>空白字符<ul><li>\t  缩进TAB符</li><li><code>&amp;nbsp;</code> 非断行空格，避免因空格在此处发生断行。JS编辑环境当作普通空格</li></ul></li><li>换行符<ul><li>\n 正常换行符</li><li>\r\n “回车”，在字符串中是 \r ，在 Windows 中是 \r\n</li></ul></li><li>注释<ul><li>单行 //</li><li>多行 /**/</li></ul></li><li>Token 词 ( 标记 )<ul><li>标识符<ul><li>$ _ a 开头</li><li>关键字：await break case catch class const continue debugger default delete do else export enum </li></ul></li><li>数字直接量<ul><li>12.toString() 被当作省略小数点后面部分数字而看成一个整体，要加空格才能成为标记Token</li><li>科学记数法：10.24E+2</li><li>box开头：0b: 二进制；0o: 八进制；0x: 十六进制</li></ul></li><li>字符串直接量<ul><li>单双引号都 ok</li></ul></li><li>正则表达式直接量<ul><li>Body + Flags：/[/]/g</li></ul></li><li>字符串模板<ul><li>整体， ${ 普通标识符 } 是并列关系</li></ul></li></ul></li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>三种语法结构：脚本 模块 函数体</p><p>加分号是个好习惯，继续保存就对了。</p><p>JS语法基本规则：</p><p>源文件：</p><ul><li>脚本：由宿主引入执行，主动性代码段，控制宿主完成一定任务<ul><li>语句</li></ul></li><li>模块：由 JS import 引入执行，被动性代码段，等待被调用的库<ul><li>import 声明<ul><li>直接 import</li><li>带from: import {v, a} from “mod”</li></ul></li><li>export 声明<ul><li>独立使用 export：export {a, b, c}</li><li>直接在声明型语句前添加 export：export function a() {}</li></ul></li><li>语句<ul><li>export default：默认导出，配合 function class 使用</li></ul></li></ul></li></ul><p>函数体：语句的列表，多了return语句可以使用</p><ul><li>普通函数体 function(){}</li><li>异步函数体 async function(){}</li><li>生成器函数体 function *foo() {}</li><li>异步生成器函数体</li></ul><p>生成器函数体能 yield；异步函数体能 await</p><p>JS语法的全局机制：</p><ul><li><p>预处理：JS 执行前对脚本模块函数体中语句进行预处理。提前处理 var 函数声明 class const let，确定其中变量的意义</p><ul><li><p>var：var的作用能<strong>穿透一切语句</strong>结构，只认三法；破解：IIFE 立即执行函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// a = undefined【预处理】</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">with</span>(o) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">2</span>;<span class="comment">// 预处理提前a，此执行作用域为o，改变了o.a</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(o.a);<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line">闭包问题：全局只有一个i，执行完循环后，i变<span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>function：整体提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);<span class="comment">// undefined，无穿透性</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>class：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">c</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">foo();<span class="comment">// 抛错，class 会预处理，在作用域中创建变量，要求访问它时抛错。无穿透。</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>指令序言机制</p><ul><li><p>use strict</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;no lint&quot;;</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">不检查lint</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>语句</p><ul><li><p>普通语句：执行过程</p><ul><li><p>语句块：产生作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> x, y;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">    y = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>空语句 ; 为语言设计完备性角度考虑</p></li><li><p>表达式语句</p><p>表达式，由运算符 直接变量 / 直接量 构成</p><ul><li><p>主要表达式【Primary Expression】：直接量</p><p>“abc”</p><p>123 </p><p>null </p><p>true </p><p>this </p><p>(a + b)</p></li><li><p>成员表达式【Member Expression】：访问对象成员</p><p>a.b </p><p>a[“b”] </p><p>super.b：构造器中用于访问父类的属性的语法</p><p>new.target：新加入的语法，用于判断函数是否被 new 调用</p></li><li><p>赋值表达式【Assignment Expression】</p><p>a = b：等号赋值</p><p>a = b = c = d 相当于 a = (b = (c = d))【不推荐】</p></li><li><p><strong>乘方表达式</strong>：3 ** 2 == 9，<code>3**2**2</code> == 81</p></li><li><p>相等表达式</p><p>==的三条规则：</p><ul><li><p>undefined == null</p></li><li><p>String 和 boolean 都化为 数字 再比较</p><p>true != “true” 【1 != “true”】</p></li><li><p>对象化为 原始值 再比较</p><p>[] == 0</p><p>[] == false</p><p>new Boolean(‘false’) != false;</p><p>new Boolean(‘false’) == true;</p></li></ul></li></ul></li><li><p>if</p></li><li><p>switch：继承自 C C++</p></li><li><p>循环 </p><ul><li><p>( do{}while 必执行一次 )</p></li><li><p>for in 枚举对象属性，关联到 enumberable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let o = &#123;a:10, b:20&#125;;</span><br><span class="line">Object.defineProperty(o, &quot;c&quot;, &#123;enumberable: false, value: 30&#125;);</span><br><span class="line">for(let p in o)&#123;</span><br><span class="line">    console.log(p); // a, b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for of 循环，背后机制是 iterator </p></li></ul></li><li><p>return </p></li><li><p>break 跳出循环</p></li><li><p>continue 结束本次循环并继续下一次循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">outer: <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++)&#123;</span><br><span class="line">    inner: <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">50</span> &amp;&amp; j == <span class="number">50</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">outer: <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++)&#123;</span><br><span class="line">    inner: <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">50</span> &amp;&amp; j == <span class="number">50</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> outer</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>with：吧对象属性在他内部作用域内变成变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">with</span>(o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>throw</p></li><li><p>try</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"error"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);<span class="comment">// 捕获异常并处理</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"finally"</span>); <span class="comment">// 执行后执行的清理工作，释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>debugger：在此断点，需挂载调试器！</p></li></ul></li><li><p>声明语句：响应预处理！</p><ul><li><p>var</p></li><li><p>let</p></li><li><p>const</p><p>let 和 const 在作用域内有效，都有预处理机制</p></li><li><p>class</p><p>块级作用域，预处理时屏蔽外部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">// 抛错</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数，属性只能写在这里面</span></span><br><span class="line">    <span class="keyword">constructor</span> (height, width) &#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter / setter</span></span><br><span class="line">    <span class="keyword">get</span> area()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.calcArea();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Method</span></span><br><span class="line">    calcArea() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数声明</p><ul><li><p>普通函数</p></li><li><p>异步async 函数：暂停执行，等待异步操作的函数，底层是 Promise 机制</p></li><li><p>generator 函数：返回一个序列的函数，底层是 iterator 机制</p></li><li><p>async generator 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a = <span class="number">1</span>, ...other</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, other);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><h3 id="进行时"><a href="#进行时" class="headerlink" title="进行时"></a>进行时</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><hr><p><strong>七种类型</strong>：Number、String、Boolean、Undefined、Null、Object、Symbol</p><p><strong>typeof</strong>：number、string、boolean、undefined、object、symbol、function</p><ul><li><p>Undefined 和 Null    </p><p>undefined 是个变量，在局部变量中可修改，全局不行；null 是关键字，表示定义了但为空</p></li><li><p>String 的意义并非字符串，而是字符串的 utf-16 编码</p></li><li><p>Symbol 是 ES6 中引入的新类型，是一切非字符串对象 key 的集合</p></li><li><p>Object 定义是“属性的集合”，属性分为数据属性和访问器属性，都是 key-value 结构，key 可为字符串 / Symbol</p></li><li><p>JS 中 “类” 仅仅是运行时对象的一个私有属性，JS 其中的 Number String Boolean Symbol 都是基本类型，都在对象类型中。比如说：3 和 new Number(3)；其中一个是 Number 类型，一个是对象类型。Number、String、Boolean 通过 new X() 出来的，是对象，而不是原始值。</p></li><li><p><strong>类型转换</strong></p><ul><li><p>装箱转换</p><p>把 基本类型 转换为 对应对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> som = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;).call(<span class="built_in">Symbol</span>(<span class="string">"a"</span>));</span><br><span class="line"><span class="keyword">typeof</span> som ==&gt; object</span><br><span class="line">som <span class="keyword">instanceof</span> <span class="built_in">Symbol</span> ==&gt; <span class="literal">true</span></span><br><span class="line">som.constructor == <span class="built_in">Symbol</span> ==&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>拆箱转换</p><p>把 对象类型 转为 基本类型</p><p>尝试调用 valueOf 和 toString</p></li></ul></li></ul><p><strong>深谈对象：</strong>JS 是高度动态性的面向对象语言。</p><p>对象分类：</p><ol><li>可触摸或看得见的东西</li><li>智力可以理解的东西</li><li>可以指导思考或行动的东西</li></ol><p>对象特征：</p><ol><li>唯一<strong>标识性</strong>：完全相同二对象也非同一对象【内存地址不同】</li><li>对象有<strong>状态</strong>：同一对象可能处于不同状态之下【属性】</li><li>对象有<strong>行为</strong>：对象状态可能因行为产生变迁【属性 / 方法】</li><li>对象是一个属性的索引结构，通过 key 查找 value。</li></ol><p>JS 标准对 对象 的定义：语言 和 宿主 的 基础设施 由 对象 提供，且 JS 程序是一系列 互相通讯 的 对象集合。<br>JS 的对象具有高度动态性，JS 赐予使用设在运行时为对象 添加 / 更改 状态行为 的能力。<br>JS 的 属性 提供了数据属性 和 访问器属性</p><ul><li>数据属性：value / writable / enumerable / configurable</li><li>访问器属性：允许读写属性时得到不同的值，函数的语法糖<br>getter / setter / enumerable / configurable</li></ul><p>JS 中对象分类</p><ul><li><p>宿主对象【浏览器、node】</p></li><li><p>内置对象</p><ul><li><p>固有对象【JS运行时创建而自动创建对象实例如 class】由标准规定 150+</p></li><li><p>原生对象【Array、RegExp】为了特定能力 / 性能而设计出来的“特权对象”</p><p>Boolean String Number Object Symbol Array Date RegExp</p><p>函数对象：具有 [[call]] 私有字段的对象</p><p>构造器对象：具有 [[construct]] 私有字段的对象</p><p>function 创建的函数必定同时是函数和构造器。表现出来的行为不同</p></li><li><p>普通对象【{}，能被原型继承】</p></li></ul></li></ul><p>JS 本身面向对象，但实现面向对象方式有点不同，模拟基于类的面向对象。</p><p>JS 选择的是 <strong>原型系统</strong> 来抽象对象形式。</p><p>原型是什么：</p><p>“基于类”：先有类，再实例化对象。类与类间可能形成继承、组合等关系。类又与语言的类型系统整合。【猫科=》老虎】<br>“基于原型”：先有实例行为，再将对象划分到最近使用方式相似的原型对象。【美洲狮=》猫科】</p><p>原型系统</p><ul><li>【原型链】读某个属性，本身=》原型链 proto 直到 null</li><li>【原型】对象拥有私有字段[[prototype]]</li></ul><p>操控原型：</p><ul><li>根据原型创建对象：Object.create(obj,{})</li><li>取得对象原型：Object.getPrototypeOf()</li><li>设置对象原型：Object.setPrototypeOf()</li></ul><p>new 的原理：</p><ul><li>以构造器 prototype 属性为原型，创建新对象</li><li>将 this 和 调用参数传给构造器【函数】并执行</li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><hr><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><h5 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h5><p>操作系统中等待的行为都是一个事件循环，宏观任务的队列相当于事件循环</p><p>认知：JS引擎常驻与内存，等待宿主 (浏览器) 将JS代码 / 函数 传给它执行</p><p>宿主发起的任务称为宏观任务【宏任务可能执行的代码包括“脚本”“模块”“函数体”】</p><p>JS 引擎发起的任务成为微观任务</p><p>许多微观任务组成宏观任务。微任务总会在下一个宏任务之前执行，在本身宏任务执行完后立即执行。</p><p>对应 ES6 中 Promise 和 await、async特性 的结合用法</p><p>async 使得函数返回 Promise，所有返回的 Promise 函数认为是异步函数<br>在 async函数 中 使用 await 来等待一个 Promise，async 和 await 都是微观任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 红绿灯 demo</span></span><br><span class="line">main();</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">await</span> change(<span class="string">'green'</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">await</span> change(<span class="string">'yellow'</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">await</span> change(<span class="string">'red'</span>, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">color, time</span>) </span>&#123;</span><br><span class="line">    dom.style.backgroundColor = color;</span><br><span class="line">    <span class="keyword">await</span> sleep(time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(res, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or<span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">green;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">yellow;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">red;</span><br><span class="line">setTimeout(change, <span class="number">3000</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="微任务执行"><a href="#微任务执行" class="headerlink" title="微任务执行"></a>微任务执行</h5><h5 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h5><p>函数：</p><ul><li>普通函数：async function() {}</li><li>箭头函数：async () =&gt; {}</li><li>class 函数：class C { foo(){} }</li><li>生成器函数：async function* foo() {}</li><li>类 class Foo { constructor(){} }</li></ul><p>new 只能和普通函数、类使用（无异步async）</p><p>闭包：编程语言领域表示一种函数。“带有函数的函数”。</p><p>组成：</p><ul><li>环境<ul><li>环境：：函数的词法环境</li><li>标识符：函数中未声明变量</li></ul></li><li>表达式：函数体</li></ul><p>执行上下文：执行的基础措施，一段代码(包含函数) 执行所需的所有信息。</p><p>在只有var没有let的JS时代，通过立即执行函数表达式 IIFE 创建一个函数马上执行以构造一个新的域，从而控制var范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)()</span><br></pre></td></tr></table></figure><p>let 块级作用域。</p><h5 id="语句执行"><a href="#语句执行" class="headerlink" title="语句执行"></a>语句执行</h5><p>普通的语句：不带控制力</p><ul><li>声明类：var const let 函数声明 类声明</li><li>表达式：a += c</li><li>空语句</li><li>debugger</li></ul><p>语句块：加大括号的一组语句</p><p>控制型语句：对内部/外部造成影响，try / catch 执行完毕，使得 normal 型完成记录，也必须执行 finally</p><p>带标签的语句：firstStatement: var i = 1; 作用类式于注释，没任何用处，与完成时记录类型中的 target 相配合，跳出多层循环。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/31/hello-world/"/>
      <url>/2019/07/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
